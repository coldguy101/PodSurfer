"use strict";
const isNumeric_1 = require('../util/isNumeric');
const Observable_1 = require('../Observable');
const async_1 = require('../scheduler/async');
class IntervalObservable extends Observable_1.Observable {
    constructor(period = 0, scheduler = async_1.async) {
        super();
        this.period = period;
        this.scheduler = scheduler;
        if (!isNumeric_1.isNumeric(period) || period < 0) {
            this.period = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            this.scheduler = async_1.async;
        }
    }
    static create(period = 0, scheduler = async_1.async) {
        return new IntervalObservable(period, scheduler);
    }
    static dispatch(state) {
        const { index, subscriber, period } = state;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        }
        state.index += 1;
        this.schedule(state, period);
    }
    _subscribe(subscriber) {
        const index = 0;
        const period = this.period;
        const scheduler = this.scheduler;
        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
            index, subscriber, period
        }));
    }
}
exports.IntervalObservable = IntervalObservable;
//# sourceMappingURL=IntervalObservable.js.map