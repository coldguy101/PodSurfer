"use strict";
const isArray_1 = require('../util/isArray');
const isPromise_1 = require('../util/isPromise');
const PromiseObservable_1 = require('./PromiseObservable');
const IteratorObservable_1 = require('./IteratorObservable');
const ArrayObservable_1 = require('./ArrayObservable');
const ArrayLikeObservable_1 = require('./ArrayLikeObservable');
const iterator_1 = require('../symbol/iterator');
const Observable_1 = require('../Observable');
const observeOn_1 = require('../operator/observeOn');
const observable_1 = require('../symbol/observable');
const isArrayLike = ((x) => x && typeof x.length === 'number');
class FromObservable extends Observable_1.Observable {
    constructor(ish, scheduler) {
        super(null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    static create(ish, scheduler) {
        if (ish != null) {
            if (typeof ish[observable_1.$$observable] === 'function') {
                if (ish instanceof Observable_1.Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            }
            else if (isArray_1.isArray(ish)) {
                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
            }
            else if (isPromise_1.isPromise(ish)) {
                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
            }
            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
            }
            else if (isArrayLike(ish)) {
                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    }
    _subscribe(subscriber) {
        const ish = this.ish;
        const scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[observable_1.$$observable]().subscribe(subscriber);
        }
        else {
            return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    }
}
exports.FromObservable = FromObservable;
//# sourceMappingURL=FromObservable.js.map